// <auto-generated />
using System;
using Facturacion.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Facturacion.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    partial class AplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Facturacion.Context.CajaGlobal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("CajaGlobalCreditoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CajaGlobalEfectivoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CajaGlobalTarjetasDebitoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CajaGlobalTotalValores")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CajaGlobalTrasferenciaTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EmpresasCreadas")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpresasCreadas");

                    b.HasIndex("FkEmpresa");

                    b.HasIndex("FkLocal");

                    b.ToTable("CajaGlobals");
                });

            modelBuilder.Entity("Facturacion.Context.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmpresasCreadas")
                        .HasColumnType("int");

                    b.Property<bool?>("Estado")
                        .HasColumnType("bit");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.Property<int>("FkRespositorioCedulas")
                        .HasColumnType("int");

                    b.Property<int?>("FkSrirepositorio")
                        .HasColumnType("int");

                    b.Property<int?>("FkUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTelefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Razonsocial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresasCreadas");

                    b.HasIndex("FkEmpresa");

                    b.HasIndex("FkLocal");

                    b.HasIndex("FkRespositorioCedulas");

                    b.HasIndex("FkSrirepositorio");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Facturacion.Context.ComprobanteCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClaveAccesoXml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPorcentaje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContribuyenteEspecial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirEstablecimiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresasCreada")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.Property<int>("FkProvedor")
                        .HasColumnType("int");

                    b.Property<int?>("FkUsuario")
                        .HasColumnType("int");

                    b.Property<string>("FormaPago")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificacionComprador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ImporteTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Moneda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroFactura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObligadoContabilidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Propina")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RazonSocialComprador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoIdentificacionComprador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSinImpuestos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FkEmpresa");

                    b.HasIndex("FkEmpresasCreada");

                    b.HasIndex("FkLocal");

                    b.HasIndex("FkProvedor");

                    b.ToTable("ComprobanteCompras");
                });

            modelBuilder.Entity("Facturacion.Context.ComprobanteVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("ComprobanteDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ComprobanteEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComprobanteFormapago")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ComprobanteIvatotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ComprobanteNumero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ComprobanteSubtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ComprobanteSubtotal0")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ComprobanteSubtotal12")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ComprobantevFecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ComprobantevTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Docsri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FkCliente")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresasCreada")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.Property<int?>("FkSecuencial")
                        .HasColumnType("int");

                    b.Property<int?>("FkTipoComprobante")
                        .HasColumnType("int");

                    b.Property<int?>("FkUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkCliente");

                    b.HasIndex("FkEmpresa");

                    b.HasIndex("FkEmpresasCreada");

                    b.HasIndex("FkLocal");

                    b.HasIndex("FkSecuencial");

                    b.HasIndex("FkTipoComprobante");

                    b.HasIndex("FkUsuario");

                    b.ToTable("ComprobanteVentas");
                });

            modelBuilder.Entity("Facturacion.Context.CorreoEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresasCreadas")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkEmpresa")
                        .IsUnique()
                        .HasFilter("[FkEmpresa] IS NOT NULL");

                    b.HasIndex("FkEmpresasCreadas")
                        .IsUnique()
                        .HasFilter("[FkEmpresasCreadas] IS NOT NULL");

                    b.HasIndex("FkLocal");

                    b.ToTable("CorreoEmpresas");
                });

            modelBuilder.Entity("Facturacion.Context.DetallesFacturaCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("CodigoPrincipal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FkFacturaCompra")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioTotalSinImpuesto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FkFacturaCompra");

                    b.ToTable("DetallesFacturaCompras");
                });

            modelBuilder.Entity("Facturacion.Context.DetalleVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("DetalleTotalIva")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DetallevCantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("DetallevDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DetallevEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DetallevTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DetallevValor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FkComprobanteVenta")
                        .HasColumnType("int");

                    b.Property<int>("FkProducto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkComprobanteVenta");

                    b.HasIndex("FkProducto");

                    b.ToTable("DetalleVentas");
                });

            modelBuilder.Entity("Facturacion.Context.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmpresaContrasena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresaEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EmpresaEstado")
                        .HasColumnType("bit");

                    b.Property<string>("EmpresaImagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresaPropietario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresaRuc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresaTelefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresaUsuarioCreador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FkSriRepositorio")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkSriRepositorio");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Facturacion.Context.EmpresasCreada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmpresasCreadaContrasenaArchivop12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresasCreadaDireccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresasCreadaEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EmpresasCreadaEstado")
                        .HasColumnType("bit");

                    b.Property<string>("EmpresasCreadaImagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresasCreadaObligadoContabiliadad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresasCreadaPropietario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresasCreadaRuc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresasCreadaTelefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpresasCreadaUbicacionarchivop12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EmpresasCreadapruebaproduccion")
                        .HasColumnType("bit");

                    b.Property<decimal>("EmpresasPorcentajeIva")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkSriRepositorio")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkEmpresa");

                    b.HasIndex("FkSriRepositorio");

                    b.ToTable("EmpresasCreadas");
                });

            modelBuilder.Entity("Facturacion.Context.ErroresFacturasElectronicas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Empidfk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FelectAmbiente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FelectComprobantexml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FelectEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FelectFechaautorizacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FelectIdentificador")
                        .HasColumnType("int");

                    b.Property<string>("FelectInformacionadicional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FelectMensaje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FelectNumeroautorizacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FelectTipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FkComprobanteVenta")
                        .HasColumnType("int");

                    b.Property<int?>("FkComprobanteVentaNavigationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkComprobanteVentaNavigationId");

                    b.ToTable("ErroresFacturasElectronicas");
                });

            modelBuilder.Entity("Facturacion.Context.FormasPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormasPagos");
                });

            modelBuilder.Entity("Facturacion.Context.Local", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresasCreadas")
                        .HasColumnType("int");

                    b.Property<int?>("FkSriRepositorio")
                        .HasColumnType("int");

                    b.Property<string>("LocalActividad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalDireccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LocalFechainicioactividad")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocalNombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalNumero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalTelefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkEmpresa");

                    b.HasIndex("FkEmpresasCreadas");

                    b.HasIndex("FkSriRepositorio");

                    b.ToTable("Locals");
                });

            modelBuilder.Entity("Facturacion.Context.NetUserAditional", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaDeRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresaCreada")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.Property<string>("FkNetUserid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FkUsuario")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NumeroparaConfirmacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FkEmpresa")
                        .IsUnique()
                        .HasFilter("[FkEmpresa] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Facturacion.Context.PermisosEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("BloquiarEmpresa")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FinDeActividades")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresasCreadas")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.Property<bool>("IngresoCrearClientes")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoEmpresa")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoFacturacionElectronica")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoFacturasCompras")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoFacturasVentas")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoPermisoEmpresa")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoProveedores")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InicioDeActividades")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroFacturas")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkEmpresa")
                        .IsUnique()
                        .HasFilter("[FkEmpresa] IS NOT NULL");

                    b.HasIndex("FkEmpresasCreadas")
                        .IsUnique()
                        .HasFilter("[FkEmpresasCreadas] IS NOT NULL");

                    b.HasIndex("FkLocal")
                        .IsUnique()
                        .HasFilter("[FkLocal] IS NOT NULL");

                    b.ToTable("PermisosEmpresas");
                });

            modelBuilder.Entity("Facturacion.Context.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("EsProducto")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistroProducto")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresasCreada")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.Property<int?>("FkUsuario")
                        .HasColumnType("int");

                    b.Property<int?>("ProductoCantidad")
                        .HasColumnType("int");

                    b.Property<string>("ProductoCodigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProductoConIva")
                        .HasColumnType("bit");

                    b.Property<string>("ProductoDescripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProductoEstado")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ProductoValor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkEmpresa");

                    b.HasIndex("FkEmpresasCreada");

                    b.HasIndex("FkLocal");

                    b.HasIndex("FkUsuario");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Facturacion.Context.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresasCreada")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.Property<int?>("FkSriRepositorio")
                        .HasColumnType("int");

                    b.Property<string>("ProveedoresEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProveedoresEstado")
                        .HasColumnType("bit");

                    b.Property<string>("ProveedoresPropietario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProveedoresRuc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkEmpresa");

                    b.HasIndex("FkEmpresasCreada");

                    b.HasIndex("FkLocal");

                    b.HasIndex("FkSriRepositorio");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Facturacion.Context.RespositorioCedulas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Estadocivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fechanacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mensaje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Razonsocial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RespositorioCedulas");
                });

            modelBuilder.Entity("Facturacion.Context.RutasXml", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FkComprobanteVenta")
                        .HasColumnType("int");

                    b.Property<string>("RutaAutorizado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaEstaAturizacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaEstaRecepcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaFirmado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaGenerado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaPdf")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkComprobanteVenta");

                    b.ToTable("RutasXmls");
                });

            modelBuilder.Entity("Facturacion.Context.Secuencial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresasCreada")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.Property<int>("FkTipoCompronbante")
                        .HasColumnType("int");

                    b.Property<int>("Numcorrelativo")
                        .HasColumnType("int");

                    b.Property<string>("Numestablecimiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numpuntoemision")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkEmpresa");

                    b.HasIndex("FkEmpresasCreada");

                    b.HasIndex("FkLocal");

                    b.HasIndex("FkTipoCompronbante")
                        .IsUnique();

                    b.ToTable("Secuencials");
                });

            modelBuilder.Entity("Facturacion.Context.SriRepositorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AgenteRepresentante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreComercial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroRuc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obligado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonaSociedad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentanteLegal")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SriRepositorios");
                });

            modelBuilder.Entity("Facturacion.Context.TipoComprobante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comprobanteid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comprobanteombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comprobantes");
                });

            modelBuilder.Entity("Facturacion.Context.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("FkEmpresasCreada")
                        .HasColumnType("int");

                    b.Property<int?>("FkLocal")
                        .HasColumnType("int");

                    b.Property<bool>("IngresoCrearClientes")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoEmpresa")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoFacturacionElectronica")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoFacturasCompras")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoFacturasVentas")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresoProveedores")
                        .HasColumnType("bit");

                    b.Property<bool>("UsuarioEstado")
                        .HasColumnType("bit");

                    b.Property<string>("UsuarioNombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioTipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FkEmpresa");

                    b.HasIndex("FkEmpresasCreada");

                    b.HasIndex("FkLocal");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Facturacion.Context.CajaGlobal", b =>
                {
                    b.HasOne("Facturacion.Context.EmpresasCreada", "EmpresasCreadasNavigation")
                        .WithMany("CajaGlobals")
                        .HasForeignKey("EmpresasCreadas");

                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithMany("CajaGlobals")
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.Local", "FkLocalNavigation")
                        .WithMany("CajaGlobals")
                        .HasForeignKey("FkLocal");

                    b.Navigation("EmpresasCreadasNavigation");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("FkLocalNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.Cliente", b =>
                {
                    b.HasOne("Facturacion.Context.EmpresasCreada", "EmpresasCreadasNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("EmpresasCreadas");

                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.Local", "FkLocalNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("FkLocal");

                    b.HasOne("Facturacion.Context.RespositorioCedulas", "FkRespositorioCedulasNavigation")
                        .WithMany()
                        .HasForeignKey("FkRespositorioCedulas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Facturacion.Context.SriRepositorio", "FkSrirepositorioNavigation")
                        .WithMany()
                        .HasForeignKey("FkSrirepositorio");

                    b.Navigation("EmpresasCreadasNavigation");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("FkLocalNavigation");

                    b.Navigation("FkRespositorioCedulasNavigation");

                    b.Navigation("FkSrirepositorioNavigation");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Facturacion.Context.ComprobanteCompra", b =>
                {
                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithMany("ComprobanteCompras")
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.Usuario", "Usuario")
                        .WithMany("ComprobanteCompras")
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.EmpresasCreada", "FkEmpresasCreadaNavigation")
                        .WithMany("ComprobanteCompras")
                        .HasForeignKey("FkEmpresasCreada");

                    b.HasOne("Facturacion.Context.Local", "LocalNavigation")
                        .WithMany("ComprobanteCompras")
                        .HasForeignKey("FkLocal");

                    b.HasOne("Facturacion.Context.Proveedor", "FkProvedorNavigation")
                        .WithMany("ComprobanteCompras")
                        .HasForeignKey("FkProvedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("FkEmpresasCreadaNavigation");

                    b.Navigation("FkProvedorNavigation");

                    b.Navigation("LocalNavigation");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Facturacion.Context.ComprobanteVenta", b =>
                {
                    b.HasOne("Facturacion.Context.Cliente", "FkClienteNavigation")
                        .WithMany()
                        .HasForeignKey("FkCliente");

                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithMany("ComprobanteVenta")
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.EmpresasCreada", "EmpresasCreadaNavigation")
                        .WithMany("ComprobanteVenta")
                        .HasForeignKey("FkEmpresasCreada");

                    b.HasOne("Facturacion.Context.Local", "LocalNavigation")
                        .WithMany("ComprobanteVenta")
                        .HasForeignKey("FkLocal");

                    b.HasOne("Facturacion.Context.Secuencial", "FkSecuencialNavigation")
                        .WithMany("ComprobanteVenta")
                        .HasForeignKey("FkSecuencial");

                    b.HasOne("Facturacion.Context.TipoComprobante", "FkTipoComprobanteNavigation")
                        .WithMany()
                        .HasForeignKey("FkTipoComprobante");

                    b.HasOne("Facturacion.Context.Usuario", "Usuario")
                        .WithMany("ComprobanteVenta")
                        .HasForeignKey("FkUsuario");

                    b.Navigation("EmpresasCreadaNavigation");

                    b.Navigation("FkClienteNavigation");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("FkSecuencialNavigation");

                    b.Navigation("FkTipoComprobanteNavigation");

                    b.Navigation("LocalNavigation");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Facturacion.Context.CorreoEmpresa", b =>
                {
                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithOne("FkCorreoNavigation")
                        .HasForeignKey("Facturacion.Context.CorreoEmpresa", "FkEmpresa");

                    b.HasOne("Facturacion.Context.EmpresasCreada", "EmpresasCreadasNavigation")
                        .WithOne("FkCorreoNavigation")
                        .HasForeignKey("Facturacion.Context.CorreoEmpresa", "FkEmpresasCreadas");

                    b.HasOne("Facturacion.Context.Local", "FkLocalNavigation")
                        .WithMany()
                        .HasForeignKey("FkLocal");

                    b.Navigation("EmpresasCreadasNavigation");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("FkLocalNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.DetallesFacturaCompra", b =>
                {
                    b.HasOne("Facturacion.Context.ComprobanteCompra", "FkFacturaCompraNavigation")
                        .WithMany("TbDetallesFacturaCompras")
                        .HasForeignKey("FkFacturaCompra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkFacturaCompraNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.DetalleVenta", b =>
                {
                    b.HasOne("Facturacion.Context.ComprobanteVenta", "ComprobanteVentaNavigation")
                        .WithMany("DetalleVenta")
                        .HasForeignKey("FkComprobanteVenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Facturacion.Context.Producto", "FkProductoNavigation")
                        .WithMany("DetalleVenta")
                        .HasForeignKey("FkProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComprobanteVentaNavigation");

                    b.Navigation("FkProductoNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.Empresa", b =>
                {
                    b.HasOne("Facturacion.Context.SriRepositorio", "SriRepositorioNavigation")
                        .WithMany("Empresas")
                        .HasForeignKey("FkSriRepositorio");

                    b.Navigation("SriRepositorioNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.EmpresasCreada", b =>
                {
                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithMany("EmpresasCreadas")
                        .HasForeignKey("FkEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Facturacion.Context.SriRepositorio", "SriRepositorioNavigation")
                        .WithMany("EmpresasCreadas")
                        .HasForeignKey("FkSriRepositorio");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("SriRepositorioNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.ErroresFacturasElectronicas", b =>
                {
                    b.HasOne("Facturacion.Context.ComprobanteVenta", "FkComprobanteVentaNavigation")
                        .WithMany("Tbdocumentosfacturacionelectronicas")
                        .HasForeignKey("FkComprobanteVentaNavigationId");

                    b.Navigation("FkComprobanteVentaNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.Local", b =>
                {
                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithMany("Locals")
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.EmpresasCreada", "FkEmpresasCreadaNavigation")
                        .WithMany("Locals")
                        .HasForeignKey("FkEmpresasCreadas");

                    b.HasOne("Facturacion.Context.SriRepositorio", "SriRepositorioNavigation")
                        .WithMany("Local")
                        .HasForeignKey("FkSriRepositorio");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("FkEmpresasCreadaNavigation");

                    b.Navigation("SriRepositorioNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.NetUserAditional", b =>
                {
                    b.HasOne("Facturacion.Context.Empresa", "Empresa")
                        .WithOne("FkNetUserNavigation")
                        .HasForeignKey("Facturacion.Context.NetUserAditional", "FkEmpresa");

                    b.HasOne("Facturacion.Context.EmpresasCreada", "EmpresasCreadas")
                        .WithOne("FkNetUserNavigation")
                        .HasForeignKey("Facturacion.Context.NetUserAditional", "FkEmpresa");

                    b.HasOne("Facturacion.Context.Local", "Local")
                        .WithOne("FkNetUserNavigation")
                        .HasForeignKey("Facturacion.Context.NetUserAditional", "FkEmpresa");

                    b.HasOne("Facturacion.Context.Usuario", "Usuario")
                        .WithOne("FkNetUserNavigation")
                        .HasForeignKey("Facturacion.Context.NetUserAditional", "FkEmpresa");

                    b.Navigation("Empresa");

                    b.Navigation("EmpresasCreadas");

                    b.Navigation("Local");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Facturacion.Context.PermisosEmpresa", b =>
                {
                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithOne("FkPermisosEmpresaNavigation")
                        .HasForeignKey("Facturacion.Context.PermisosEmpresa", "FkEmpresa");

                    b.HasOne("Facturacion.Context.EmpresasCreada", "FkEmpresasCreadasNavigation")
                        .WithOne("FkPermisosEmpresaNavigation")
                        .HasForeignKey("Facturacion.Context.PermisosEmpresa", "FkEmpresasCreadas");

                    b.HasOne("Facturacion.Context.Local", "FkLocalNavigation")
                        .WithOne("FkPermisosEmpresaNavigation")
                        .HasForeignKey("Facturacion.Context.PermisosEmpresa", "FkLocal");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("FkEmpresasCreadasNavigation");

                    b.Navigation("FkLocalNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.Producto", b =>
                {
                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.EmpresasCreada", "EmpresasCreadaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("FkEmpresasCreada");

                    b.HasOne("Facturacion.Context.Local", "LocalNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("FkLocal");

                    b.HasOne("Facturacion.Context.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("FkUsuario");

                    b.Navigation("EmpresasCreadaNavigation");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("LocalNavigation");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Facturacion.Context.Proveedor", b =>
                {
                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithMany()
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.EmpresasCreada", "EmpresasCreadaNavigation")
                        .WithMany()
                        .HasForeignKey("FkEmpresasCreada");

                    b.HasOne("Facturacion.Context.Local", "LocalNavigation")
                        .WithMany()
                        .HasForeignKey("FkLocal");

                    b.HasOne("Facturacion.Context.SriRepositorio", "SriRepositorioNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("FkSriRepositorio");

                    b.Navigation("EmpresasCreadaNavigation");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("LocalNavigation");

                    b.Navigation("SriRepositorioNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.RutasXml", b =>
                {
                    b.HasOne("Facturacion.Context.ComprobanteVenta", "FkComprobanteVentaNavigation")
                        .WithMany("TbrutasXmls")
                        .HasForeignKey("FkComprobanteVenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkComprobanteVentaNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.Secuencial", b =>
                {
                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithMany("Secuencials")
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.EmpresasCreada", "EmpresasCreadaNavigation")
                        .WithMany("Secuencials")
                        .HasForeignKey("FkEmpresasCreada");

                    b.HasOne("Facturacion.Context.Local", "LocalNavigation")
                        .WithMany("Secuencials")
                        .HasForeignKey("FkLocal");

                    b.HasOne("Facturacion.Context.TipoComprobante", "TipoComprobanteNavigation")
                        .WithOne("SecuencialNavigation")
                        .HasForeignKey("Facturacion.Context.Secuencial", "FkTipoCompronbante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpresasCreadaNavigation");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("LocalNavigation");

                    b.Navigation("TipoComprobanteNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.Usuario", b =>
                {
                    b.HasOne("Facturacion.Context.Empresa", "FkEmpresaNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("FkEmpresa");

                    b.HasOne("Facturacion.Context.EmpresasCreada", "EmpresasCreadaNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("FkEmpresasCreada");

                    b.HasOne("Facturacion.Context.Local", "LocalNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("FkLocal");

                    b.Navigation("EmpresasCreadaNavigation");

                    b.Navigation("FkEmpresaNavigation");

                    b.Navigation("LocalNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Facturacion.Context.NetUserAditional", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Facturacion.Context.NetUserAditional", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Facturacion.Context.NetUserAditional", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Facturacion.Context.NetUserAditional", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Facturacion.Context.ComprobanteCompra", b =>
                {
                    b.Navigation("TbDetallesFacturaCompras");
                });

            modelBuilder.Entity("Facturacion.Context.ComprobanteVenta", b =>
                {
                    b.Navigation("DetalleVenta");

                    b.Navigation("Tbdocumentosfacturacionelectronicas");

                    b.Navigation("TbrutasXmls");
                });

            modelBuilder.Entity("Facturacion.Context.Empresa", b =>
                {
                    b.Navigation("CajaGlobals");

                    b.Navigation("Clientes");

                    b.Navigation("ComprobanteCompras");

                    b.Navigation("ComprobanteVenta");

                    b.Navigation("EmpresasCreadas");

                    b.Navigation("FkCorreoNavigation");

                    b.Navigation("FkNetUserNavigation");

                    b.Navigation("FkPermisosEmpresaNavigation");

                    b.Navigation("Locals");

                    b.Navigation("Productos");

                    b.Navigation("Secuencials");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Facturacion.Context.EmpresasCreada", b =>
                {
                    b.Navigation("CajaGlobals");

                    b.Navigation("Clientes");

                    b.Navigation("ComprobanteCompras");

                    b.Navigation("ComprobanteVenta");

                    b.Navigation("FkCorreoNavigation")
                        .IsRequired();

                    b.Navigation("FkNetUserNavigation")
                        .IsRequired();

                    b.Navigation("FkPermisosEmpresaNavigation")
                        .IsRequired();

                    b.Navigation("Locals");

                    b.Navigation("Productos");

                    b.Navigation("Secuencials");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Facturacion.Context.Local", b =>
                {
                    b.Navigation("CajaGlobals");

                    b.Navigation("Clientes");

                    b.Navigation("ComprobanteCompras");

                    b.Navigation("ComprobanteVenta");

                    b.Navigation("FkNetUserNavigation");

                    b.Navigation("FkPermisosEmpresaNavigation");

                    b.Navigation("Productos");

                    b.Navigation("Secuencials");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Facturacion.Context.Producto", b =>
                {
                    b.Navigation("DetalleVenta");
                });

            modelBuilder.Entity("Facturacion.Context.Proveedor", b =>
                {
                    b.Navigation("ComprobanteCompras");
                });

            modelBuilder.Entity("Facturacion.Context.Secuencial", b =>
                {
                    b.Navigation("ComprobanteVenta");
                });

            modelBuilder.Entity("Facturacion.Context.SriRepositorio", b =>
                {
                    b.Navigation("Empresas");

                    b.Navigation("EmpresasCreadas");

                    b.Navigation("Local");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Facturacion.Context.TipoComprobante", b =>
                {
                    b.Navigation("SecuencialNavigation");
                });

            modelBuilder.Entity("Facturacion.Context.Usuario", b =>
                {
                    b.Navigation("ComprobanteCompras");

                    b.Navigation("ComprobanteVenta");

                    b.Navigation("FkNetUserNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
